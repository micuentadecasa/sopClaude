#!/bin/bash

# claude-sop - Trigger Claude Code to execute the integrated SOP generation system
# All logic is now contained in CLAUDE.md

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Default options
RUN_REVIEW=false
START_STAGE=1
QUIET=false
VERBOSE=false
FRESH_START=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --review)
            RUN_REVIEW=true
            shift
            ;;
        --stage)
            START_STAGE="$2"
            shift 2
            ;;
        --quiet)
            QUIET=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --fresh)
            FRESH_START=true
            shift
            ;;
        --help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --review      Run quality review after all stages"
            echo "  --stage N     Start from stage N (1, 2, or 3)"
            echo "  --quiet       Minimal output"
            echo "  --verbose     Detailed output"
            echo "  --fresh       Clear previous outputs before starting"
            echo "  --help        Show this help message"
            echo ""
            echo "This command triggers Claude Code to follow the instructions in CLAUDE.md"
            echo "All stage logic is now integrated into the CLAUDE.md file."
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Run '$0 --help' for usage information"
            exit 1
            ;;
    esac
done

# Function to print with color
print_header() {
    if [ "$QUIET" != true ]; then
        echo -e "${BLUE}${BOLD}$1${NC}"
    fi
}

print_success() {
    if [ "$QUIET" != true ]; then
        echo -e "${GREEN}‚úì $1${NC}"
    fi
}

print_error() {
    echo -e "${RED}‚úó $1${NC}" >&2
}

print_info() {
    if [ "$QUIET" != true ]; then
        echo -e "$1"
    fi
}

# Function to update progress JSON with command options
update_progress_options() {
    mkdir -p tmp
    
    # Create or update the progress file with current options
    cat > tmp/sop-progress.json << EOF
{
  "version": "1.0.0",
  "current_stage": 0,
  "completed_stages": [],
  "started_at": null,
  "last_updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "options": {
    "fresh_start": $FRESH_START,
    "run_review": $RUN_REVIEW,
    "start_stage": $START_STAGE,
    "verbose": $VERBOSE,
    "quiet": $QUIET
  },
  "status": "ready"
}
EOF
}

# Main execution
print_header "üöÄ Claude SOP Generator - Integrated System"
print_header "========================================="
echo ""

# Pre-flight checks
print_info "üìã Running pre-flight checks..."

# Check if Claude Code is installed
if ! command -v claude &> /dev/null; then
    print_error "Claude Code is not installed or not in PATH"
    print_info "Install Claude Code to use this system"
    exit 1
fi
print_success "Claude Code found"

# Check if input file exists
if [ ! -f "input/use-case.md" ]; then
    print_error "Input file not found: input/use-case.md"
    print_info "Please create your use case description first"
    exit 1
fi
print_success "Input file found"

# Clear outputs if fresh start requested
if [ "$FRESH_START" = true ]; then
    print_info "Clearing previous outputs..."
    ./claude-clear <<< "yes" > /dev/null 2>&1
    print_success "Previous outputs cleared"
fi

# Update progress with current options
update_progress_options
print_success "Progress tracking initialized"

echo ""

# Now trigger Claude Code to execute the integrated system
print_header "Executing Integrated SOP Generation System"
print_info "Following instructions in CLAUDE.md..."
echo ""

# Construct the prompt for Claude Code
CLAUDE_PROMPT="You are now executing the Claude SOP Generator system. Please follow the INTEGRATED STAGE EXECUTION LOGIC section in CLAUDE.md to:

1. Read the current progress state from tmp/sop-progress.json
2. Detect which stage to execute based on the tracking files and options
3. Execute the appropriate stage(s) following the detailed instructions in CLAUDE.md
4. Update progress tracking as you complete tasks
5. Continue until all requested stages are complete

The command was run with these options:
- Start from stage: $START_STAGE
- Fresh start: $FRESH_START
- Run review: $RUN_REVIEW
- Verbose: $VERBOSE
- Quiet: $QUIET

Please begin execution now."

# Execute Claude Code
if [ "$VERBOSE" = true ]; then
    echo "$CLAUDE_PROMPT" | claude
else
    # Ensure tmp directory exists for logging
    mkdir -p tmp
    echo "$CLAUDE_PROMPT" | claude > tmp/claude-sop-execution.log 2>&1
fi

exit_code=$?

if [ $exit_code -eq 0 ]; then
    print_success "SOP generation completed successfully"
    if [ "$VERBOSE" != true ]; then
        print_info "Check tmp/claude-sop-execution.log for detailed output"
    fi
else
    print_error "SOP generation encountered errors"
    if [ "$VERBOSE" != true ]; then
        print_error "Check tmp/claude-sop-execution.log for details"
    fi
fi

echo ""
print_header "üìÅ Next Steps:"
print_info "1. Review outputs in the output/ directory"
print_info "2. Check implementation in output/stage3-build/"
print_info "3. Run ./claude-review for quality assessment if not already done"
print_info ""
print_info "To start fresh with a new use case, run: ./claude-clear"

# Exit with the same code as Claude Code
exit $exit_code