#!/bin/bash

# claude-sop - Master command to run all SOP generation stages

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Default options
RUN_REVIEW=false
START_STAGE=1
DRY_RUN=false
QUIET=false
VERBOSE=false
FRESH_START=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --review)
            RUN_REVIEW=true
            shift
            ;;
        --stage)
            START_STAGE="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --quiet)
            QUIET=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --fresh)
            FRESH_START=true
            shift
            ;;
        --help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --review      Run quality review after all stages"
            echo "  --stage N     Start from stage N (1, 2, or 3)"
            echo "  --dry-run     Show what would be executed without running"
            echo "  --quiet       Minimal output"
            echo "  --verbose     Detailed output"
            echo "  --fresh       Clear previous outputs before starting"
            echo "  --help        Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Run '$0 --help' for usage information"
            exit 1
            ;;
    esac
done

# Function to print with color
print_header() {
    if [ "$QUIET" != true ]; then
        echo -e "${BLUE}${BOLD}$1${NC}"
    fi
}

print_success() {
    if [ "$QUIET" != true ]; then
        echo -e "${GREEN}‚úì $1${NC}"
    fi
}

print_error() {
    echo -e "${RED}‚úó $1${NC}" >&2
}

print_warning() {
    if [ "$QUIET" != true ]; then
        echo -e "${YELLOW}‚ö† $1${NC}"
    fi
}

print_info() {
    if [ "$QUIET" != true ]; then
        echo -e "$1"
    fi
}

# Function to show progress bar
show_progress() {
    local current=$1
    local total=$2
    local width=30
    local percentage=$((current * 100 / total))
    local filled=$((width * current / total))
    
    if [ "$QUIET" != true ]; then
        printf "\r["
        printf "%${filled}s" | tr ' ' '‚ñà'
        printf "%$((width - filled))s" | tr ' ' '‚ñë'
        printf "] %3d%%" $percentage
        
        if [ $current -eq $total ]; then
            echo ""
        fi
    fi
}

# Function to run a command with timing
run_with_timing() {
    local cmd=$1
    local stage_name=$2
    local start_time=$(date +%s)
    
    if [ "$DRY_RUN" = true ]; then
        print_info "Would run: $cmd"
        return 0
    fi
    
    if [ "$VERBOSE" = true ]; then
        $cmd
    else
        $cmd > /tmp/claude-sop-stage.log 2>&1
    fi
    
    local exit_code=$?
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    if [ $exit_code -eq 0 ]; then
        print_success "$stage_name completed in ${duration}s"
    else
        print_error "$stage_name failed after ${duration}s"
        if [ "$VERBOSE" != true ]; then
            print_error "Check /tmp/claude-sop-stage.log for details"
        fi
    fi
    
    return $exit_code
}

# Main execution
print_header "üöÄ Claude SOP Generator - Full Pipeline"
print_header "====================================="
echo ""

# Start time
PIPELINE_START=$(date +%s)

# Pre-flight checks
print_info "üìã Running pre-flight checks..."

# Check if Claude is installed
if ! command -v claude &> /dev/null; then
    print_error "Claude Code is not installed or not in PATH"
    print_info "Install with: npm install -g @anthropic-ai/claude-code"
    exit 1
fi
print_success "Claude Code found"

# Check if input file exists
if [ ! -f "input/use-case.md" ]; then
    print_error "Input file not found: input/use-case.md"
    print_info "Please create your use case description first"
    exit 1
fi
print_success "Input file found"

# Check for existing outputs
if [ -d "output" ] && [ "$(ls -A output 2>/dev/null)" ]; then
    if [ "$FRESH_START" = true ]; then
        print_warning "Clearing existing outputs..."
        ./claude-clear <<< "yes" > /dev/null 2>&1
        print_success "Previous outputs cleared"
    else
        print_warning "Existing outputs found. Use --fresh to clear them first"
        read -p "Continue anyway? (yes/no): " continue_anyway
        if [ "$continue_anyway" != "yes" ]; then
            print_info "Aborted by user"
            exit 0
        fi
    fi
fi

echo ""

# Stage tracking
stages_completed=0
total_stages=3

# Stage 1: Define
if [ $START_STAGE -le 1 ]; then
    print_header "Stage 1: Define"
    print_info "Analyzing use case and generating scenarios..."
    
    if run_with_timing "./claude-define" "Stage 1"; then
        stages_completed=$((stages_completed + 1))
        show_progress $stages_completed $total_stages
    else
        print_error "Stage 1 failed. Fix errors and try again."
        exit 1
    fi
    echo ""
fi

# Stage 2: Design
if [ $START_STAGE -le 2 ]; then
    # Check if Stage 1 outputs exist
    if [ ! -f "output/stage1-define/agent-scope.md" ] && [ $START_STAGE -eq 2 ]; then
        print_error "Stage 1 outputs not found. Run from Stage 1 first."
        exit 1
    fi
    
    print_header "Stage 2: Design"
    print_info "Creating Standard Operating Procedure..."
    
    if run_with_timing "./claude-design" "Stage 2"; then
        stages_completed=$((stages_completed + 1))
        show_progress $stages_completed $total_stages
    else
        print_error "Stage 2 failed. Fix errors and try again."
        exit 1
    fi
    echo ""
fi

# Stage 3: Build
if [ $START_STAGE -le 3 ]; then
    # Check if Stage 2 outputs exist
    if [ ! -f "output/stage2-design/sop/main-workflow.md" ] && [ $START_STAGE -eq 3 ]; then
        print_error "Stage 2 outputs not found. Run from Stage 2 first."
        exit 1
    fi
    
    print_header "Stage 3: Build"
    print_info "Generating implementation artifacts..."
    
    if run_with_timing "./claude-build" "Stage 3"; then
        stages_completed=$((stages_completed + 1))
        show_progress $stages_completed $total_stages
    else
        print_error "Stage 3 failed. Fix errors and try again."
        exit 1
    fi
    echo ""
fi

# Optional: Run review
if [ "$RUN_REVIEW" = true ]; then
    print_header "Quality Review"
    print_info "Running comprehensive review..."
    
    if run_with_timing "./claude-review" "Review"; then
        print_success "Review completed"
    else
        print_warning "Review encountered issues"
    fi
    echo ""
fi

# Calculate total time
PIPELINE_END=$(date +%s)
TOTAL_TIME=$((PIPELINE_END - PIPELINE_START))
TOTAL_MINUTES=$((TOTAL_TIME / 60))
TOTAL_SECONDS=$((TOTAL_TIME % 60))

# Summary
print_header "‚ú® SOP Generation Complete!"
print_info "Total time: ${TOTAL_MINUTES}m ${TOTAL_SECONDS}s"
echo ""

# Count outputs
if [ -d "output" ]; then
    SCENARIOS=$(find output/stage1-define/scenarios -name "*.md" 2>/dev/null | wc -l)
    SOP_FILES=$(find output/stage2-design/sop -name "*.md" 2>/dev/null | wc -l)
    IMPL_FILES=$(find output/stage3-build -name "*.py" -o -name "*.md" 2>/dev/null | wc -l)
    
    print_header "üìä Summary:"
    print_info "- Agent scope defined"
    print_info "- $SCENARIOS scenarios created"
    print_info "- $SOP_FILES SOP documents generated"
    print_info "- $IMPL_FILES implementation files created"
    
    # Check for review warnings
    if [ -f "output/overall-review.md" ]; then
        WARNINGS=$(grep -c "‚ö†Ô∏è" output/overall-review.md 2>/dev/null || echo "0")
        ERRORS=$(grep -c "‚ùå" output/overall-review.md 2>/dev/null || echo "0")
        print_info "- $ERRORS errors, $WARNINGS warnings found in review"
    fi
fi

echo ""
print_header "üìÅ Next Steps:"
print_info "1. Review outputs in the output/ directory"
print_info "2. Check implementation in output/stage3-build/"
if [ "$RUN_REVIEW" != true ]; then
    print_info "3. Run ./claude-review for quality assessment"
fi
print_info ""
print_info "To start fresh with a new use case, run: ./claude-clear"

# Exit with success
exit 0