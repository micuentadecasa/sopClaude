#!/bin/bash

# claude-build - Stage 3: Build MVP implementation from SOP

echo "🚀 Starting Stage 3: Build MVP Implementation"
echo "==========================================="

# Check if stage 2 outputs exist
if [ ! -f "output/stage2-design/sop/main-workflow.md" ]; then
    echo "❌ Error: Stage 2 outputs not found"
    echo "         Please run ./claude-design first"
    exit 1
fi

# Create output directories
mkdir -p output/stage3-build/{architecture,prompts/task-prompts,implementation,tests,review}

echo "📖 Reading Stage 2 outputs..."
echo ""

# Step 1: Design system architecture
echo "🏗️  Designing system architecture..."
claude --no-interactive \
  --prompt "$(cat prompts/build-architecture-prompt.md)" \
  --context output/stage2-design/sop/optimized-sop.md \
  --context output/stage2-design/integrations.md \
  > output/stage3-build/architecture/system-design.md

if [ $? -eq 0 ]; then
    echo "✅ System architecture designed"
else
    echo "❌ Error designing architecture"
    exit 1
fi

# Step 2: Generate system prompt
echo ""
echo "🤖 Generating system prompt..."
claude --no-interactive \
  --prompt "$(cat prompts/build-system-prompt.md)" \
  --context output/stage1-define/agent-scope.md \
  --context output/stage2-design/sop/optimized-sop.md \
  --context output/stage3-build/architecture/system-design.md \
  > output/stage3-build/prompts/system-prompt.md

if [ $? -eq 0 ]; then
    echo "✅ System prompt created"
else
    echo "❌ Error generating system prompt"
    exit 1
fi

# Step 3: Generate task-specific prompts
echo ""
echo "📝 Creating task-specific prompts..."
claude --no-interactive \
  --prompt "$(cat prompts/build-task-prompts.md)" \
  --context output/stage2-design/sop/main-workflow.md \
  --context output/stage2-design/sop/decision-trees.md \
  > output/stage3-build/prompts/task-prompts/all-prompts.md

# Split into individual task prompt files
claude --no-interactive \
  --prompt "Extract each task prompt into a separate file. Format: TASK_PROMPT_[NAME]: [content]" \
  --context output/stage3-build/prompts/task-prompts/all-prompts.md \
  > output/stage3-build/prompts/task-prompts/split-temp.txt

# Parse and create individual prompt files
while IFS= read -r line; do
    if [[ $line == TASK_PROMPT_* ]]; then
        prompt_name=$(echo "$line" | sed 's/TASK_PROMPT_\([^:]*\):.*/\1/' | tr '[:upper:]' '[:lower:]')
        prompt_file="output/stage3-build/prompts/task-prompts/${prompt_name}.md"
        echo "${line#*: }" > "$prompt_file"
    fi
done < output/stage3-build/prompts/task-prompts/split-temp.txt

rm -f output/stage3-build/prompts/task-prompts/split-temp.txt
echo "✅ Task-specific prompts created"

# Step 4: Generate implementation code
echo ""
echo "💻 Generating implementation code..."
claude --no-interactive \
  --prompt "$(cat prompts/build-implementation-prompt.md)" \
  --context output/stage3-build/architecture/system-design.md \
  --context output/stage2-design/integrations.md \
  > output/stage3-build/implementation/agent-core.py

if [ $? -eq 0 ]; then
    echo "✅ Core implementation generated"
else
    echo "❌ Error generating implementation"
    exit 1
fi

# Step 5: Generate integration modules
echo ""
echo "🔌 Creating integration modules..."
claude --no-interactive \
  --prompt "$(cat prompts/build-integrations-prompt.md)" \
  --context output/stage2-design/integrations.md \
  --context output/stage3-build/architecture/system-design.md \
  > output/stage3-build/implementation/integrations.py

if [ $? -eq 0 ]; then
    echo "✅ Integration modules created"
else
    echo "❌ Error creating integrations"
    exit 1
fi

# Step 6: Generate test framework
echo ""
echo "🧪 Building test framework..."
claude --no-interactive \
  --prompt "$(cat prompts/build-tests-prompt.md)" \
  --context output/stage1-define/scenarios/all-scenarios.md \
  --context output/stage3-build/implementation/agent-core.py \
  > output/stage3-build/tests/test-suite.py

if [ $? -eq 0 ]; then
    echo "✅ Test framework created"
else
    echo "❌ Error generating tests"
    exit 1
fi

# Step 7: Generate deployment guide
echo ""
echo "📚 Creating deployment documentation..."
claude --no-interactive \
  --prompt "$(cat prompts/build-deployment-prompt.md)" \
  --context output/stage3-build/architecture/system-design.md \
  --context output/stage3-build/implementation/agent-core.py \
  > output/stage3-build/deployment-guide.md

if [ $? -eq 0 ]; then
    echo "✅ Deployment guide created"
else
    echo "❌ Error creating deployment guide"
    exit 1
fi

# Step 8: Generate quality review
echo ""
echo "🔍 Running final quality review..."
claude --no-interactive \
  --prompt "$(cat prompts/build-review-prompt.md)" \
  --context output/stage3-build/architecture/system-design.md \
  --context output/stage3-build/prompts/system-prompt.md \
  --context output/stage3-build/implementation/agent-core.py \
  --context output/stage3-build/tests/test-suite.py \
  > output/stage3-build/review/stage3-review.md

if [ $? -eq 0 ]; then
    echo "✅ Quality review completed"
else
    echo "❌ Error generating review"
    exit 1
fi

# Step 9: Create tracking file
echo ""
echo "📊 Creating progress tracking..."
cat > output/stage3-build/.tracking.json << EOF
{
  "stage": "build",
  "status": "completed",
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "outputs": {
    "architecture": "output/stage3-build/architecture/system-design.md",
    "system_prompt": "output/stage3-build/prompts/system-prompt.md",
    "task_prompts": "output/stage3-build/prompts/task-prompts/",
    "implementation": "output/stage3-build/implementation/agent-core.py",
    "integrations": "output/stage3-build/implementation/integrations.py",
    "tests": "output/stage3-build/tests/test-suite.py",
    "deployment": "output/stage3-build/deployment-guide.md",
    "review": "output/stage3-build/review/stage3-review.md"
  }
}
EOF

# Clean up temporary files
rm -f output/stage3-build/prompts/task-prompts/all-prompts.md

echo ""
echo "✨ Stage 3 complete!"
echo ""
echo "📁 Output files created:"
echo "   - output/stage3-build/architecture/system-design.md"
echo "   - output/stage3-build/prompts/system-prompt.md"
echo "   - output/stage3-build/prompts/task-prompts/*.md"
echo "   - output/stage3-build/implementation/agent-core.py"
echo "   - output/stage3-build/implementation/integrations.py"
echo "   - output/stage3-build/tests/test-suite.py"
echo "   - output/stage3-build/deployment-guide.md"
echo "   - output/stage3-build/review/stage3-review.md"
echo ""
echo "🎉 Your agent MVP is ready! Check the deployment guide to get started."